package com.valtech.poc.sms.controller;

import java.time.LocalDate;
import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
<<<<<<< HEAD
=======
import org.springframework.format.annotation.DateTimeFormat;
>>>>>>> 08ec36379875278530d887882b0982948da4f219
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
<<<<<<< HEAD
=======
import org.springframework.web.bind.annotation.PathVariable;
>>>>>>> 08ec36379875278530d887882b0982948da4f219
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.valtech.poc.sms.entities.Employee;
import com.valtech.poc.sms.entities.Seat;
import com.valtech.poc.sms.entities.SeatsBooked;
import com.valtech.poc.sms.service.SeatBookingService;

@RestController
@RequestMapping("/seats")
public class SeatBookingController {

    @Autowired
    private SeatBookingService seatService;
//
    @GetMapping("/total")
    public ResponseEntity<List<Integer>> getAllSeats() {
        List<Integer> allSeats = seatService.getAllSeats();
        return ResponseEntity.ok().body(allSeats);
    }
//        
    @GetMapping("/available")
    public ResponseEntity<List<Integer>> availableSeats() {
    	List<Integer> availableSeats = seatService.availableSeats();
    	return ResponseEntity.ok().body(availableSeats);
    	
    }

    @GetMapping("/count")
    public ResponseEntity<List<Integer>> getTotalSeatsCount() {
    	List<Integer> totalSeats = seatService.countTotalSeats();
		return ResponseEntity.ok().body(totalSeats);
    	
    }
<<<<<<< HEAD
//    @PostMapping("/book-seat")
//    public ResponseEntity<String> bookSeat() {
//        int seatNumber = seatService.bookSeat();
//        if (seatNumber != 0000) {
//        	 return ResponseEntity.ok("Seat " + seatNumber + " booked");
//        } else {
//         return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("No seats available");
//         
//        }
//    }

        
//    @GetMapping("/id")
//    public ResponseEntity<List<Integer>> getSeatById() {
//    	List<Integer> seatId = seatService.getSeatById();
//    	return ResponseEntity.ok().body(seatId);
//    }
=======
 @ResponseBody
    @GetMapping("/employees/{id}")
      public ResponseEntity<List<SeatsBooked>> findEmployeeWiseSeatsBooked(@PathVariable("id") int empId) {
         Employee emp = new Employee();
         emp.seteId(empId);
         List<SeatsBooked> seatsBookedList = seatService.findEmployeeWiseSeatsBooked(emp);
           if (seatsBookedList.isEmpty()) {
              return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }
           return new ResponseEntity<>(seatsBookedList, HttpStatus.OK);
        }
    
    
    @GetMapping("/available/{date}")
       public ResponseEntity<List<Seat>> getAvailableSeatsByDate(@PathVariable("date") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
         List<Seat> availableSeats = seatService.findAvailableSeatsByDate(date);
             if (availableSeats.isEmpty()) {
                 return ResponseEntity.noContent().build();
                        }
                 return ResponseEntity.ok(availableSeats);
       }
    
     @PostMapping("/book")
      public ResponseEntity<?> bookSeat() {
         try {
           this.seatService.bookSeat();
           return ResponseEntity.ok().build();
          } catch (Exception e) {
             return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
          }
       
      }
>>>>>>> 08ec36379875278530d887882b0982948da4f219
}


//@GetMapping("/seats/count")
//public ResponseEntity<Integer> getTotalSeatsCount() {
//    int totalSeatsCount = seatBookingService.countTotalSeats();
//    return ResponseEntity.ok(totalSeatsCount);
//}
